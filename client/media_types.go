// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "cellar": Application Media Types
//
// Command:
// $ goagen
// --design=GoaSample/design
// --out=$(GOPATH)/src/GoaSample
// --version=v1.3.0

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
)

// Comment (default view)
//
// Identifier: application/vnd.goa.comment+json; view=default
type GoaComment struct {
	// comment content
	Content string `form:"content" json:"content" xml:"content"`
	// comment created datetime
	CreatedDt *time.Time `form:"created_dt,omitempty" json:"created_dt,omitempty" xml:"created_dt,omitempty"`
	// comment ID
	ID int `form:"id" json:"id" xml:"id"`
	// comment updated datetime
	UpdatedDt *time.Time `form:"updated_dt,omitempty" json:"updated_dt,omitempty" xml:"updated_dt,omitempty"`
}

// Validate validates the GoaComment media type instance.
func (mt *GoaComment) Validate() (err error) {

	if mt.Content == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "content"))
	}
	return
}

// DecodeGoaComment decodes the GoaComment instance encoded in resp body.
func (c *Client) DecodeGoaComment(resp *http.Response) (*GoaComment, error) {
	var decoded GoaComment
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A bottle of wine (default view)
//
// Identifier: application/vnd.goa.example.bottle+json; view=default
type GoaExampleBottle struct {
	// API href for making requests on the bottle
	Href string `form:"href" json:"href" xml:"href"`
	// Unique bottle ID
	ID int `form:"id" json:"id" xml:"id"`
	// Name of wine
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the GoaExampleBottle media type instance.
func (mt *GoaExampleBottle) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// DecodeGoaExampleBottle decodes the GoaExampleBottle instance encoded in resp body.
func (c *Client) DecodeGoaExampleBottle(resp *http.Response) (*GoaExampleBottle, error) {
	var decoded GoaExampleBottle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
