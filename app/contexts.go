// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "cellar": Application Contexts
//
// Command:
// $ goagen
// --design=GoaSample/design
// --out=$(GOPATH)/src/GoaSample
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// ShowBottleContext provides the bottle show action context.
type ShowBottleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BottleID int
}

// NewShowBottleContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottle controller show action.
func NewShowBottleContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowBottleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowBottleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBottleID := req.Params["bottleID"]
	if len(paramBottleID) > 0 {
		rawBottleID := paramBottleID[0]
		if bottleID, err2 := strconv.Atoi(rawBottleID); err2 == nil {
			rctx.BottleID = bottleID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("bottleID", rawBottleID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowBottleContext) OK(r *GoaExampleBottle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.bottle+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowBottleContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateCommentContext provides the comment create action context.
type CreateCommentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCreateCommentContext parses the incoming request URL and body, performs validations and creates the
// context used by the comment controller create action.
func NewCreateCommentContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCommentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCommentContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateCommentContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// DeleteCommentContext provides the comment delete action context.
type DeleteCommentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CommentID string
}

// NewDeleteCommentContext parses the incoming request URL and body, performs validations and creates the
// context used by the comment controller delete action.
func NewDeleteCommentContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCommentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCommentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCommentID := req.Params["comment_id"]
	if len(paramCommentID) > 0 {
		rawCommentID := paramCommentID[0]
		rctx.CommentID = rawCommentID
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteCommentContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// ShowCommentContext provides the comment show action context.
type ShowCommentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CommentID int
}

// NewShowCommentContext parses the incoming request URL and body, performs validations and creates the
// context used by the comment controller show action.
func NewShowCommentContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCommentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCommentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCommentID := req.Params["comment_id"]
	if len(paramCommentID) > 0 {
		rawCommentID := paramCommentID[0]
		if commentID, err2 := strconv.Atoi(rawCommentID); err2 == nil {
			rctx.CommentID = commentID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("comment_id", rawCommentID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCommentContext) OK(r *GoaComment) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.comment+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCommentContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateCommentContext provides the comment update action context.
type UpdateCommentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CommentID string
}

// NewUpdateCommentContext parses the incoming request URL and body, performs validations and creates the
// context used by the comment controller update action.
func NewUpdateCommentContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCommentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCommentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCommentID := req.Params["comment_id"]
	if len(paramCommentID) > 0 {
		rawCommentID := paramCommentID[0]
		rctx.CommentID = rawCommentID
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateCommentContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}
